{
    "type": "bundle",
    "id": "bundle--adcbe475-75e8-445a-a807-41b7f3685f35",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--cbb4c1e5-e765-42e5-be45-d1d1ee9c40ff",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-11-08T07:17:41.616929Z",
            "modified": "2024-11-08T07:17:41.616929Z",
            "name": "CVE-2024-50203",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf, arm64: Fix address emission with tag-based KASAN enabled\n\nWhen BPF_TRAMP_F_CALL_ORIG is enabled, the address of a bpf_tramp_image\nstruct on the stack is passed during the size calculation pass and\nan address on the heap is passed during code generation. This may\ncause a heap buffer overflow if the heap address is tagged because\nemit_a64_mov_i64() will emit longer code than it did during the size\ncalculation pass. The same problem could occur without tag-based\nKASAN if one of the 16-bit words of the stack address happened to\nbe all-ones during the size calculation pass. Fix the problem by\nassuming the worst case (4 instructions) when calculating the size\nof the bpf_tramp_image address emission.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-50203"
                }
            ]
        }
    ]
}