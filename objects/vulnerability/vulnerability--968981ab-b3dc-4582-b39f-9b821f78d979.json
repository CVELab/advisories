{
    "id": "bundle--dd5fa877-6b3b-4ab2-a22d-e142b90979b0",
    "objects": [
        {
            "created": "2021-03-13T20:12:24.853533Z",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "description": "An issue was discovered in USC iLab cereal through 1.3.0. It employs caching of std::shared_ptr values, using the raw pointer address as a unique identifier. This becomes problematic if an std::shared_ptr variable goes out of scope and is freed, and a new std::shared_ptr is allocated at the same address. Serialization fidelity thereby becomes dependent upon memory layout. In short, serialized std::shared_ptr variables cannot always be expected to serialize back into their original values. This can have any number of consequences, depending on the context within which this manifests.",
            "external_references": [
                {
                    "external_id": "CVE-2020-11105",
                    "source_name": "cve"
                }
            ],
            "id": "vulnerability--968981ab-b3dc-4582-b39f-9b821f78d979",
            "modified": "2021-11-22T14:54:52.900149Z",
            "name": "CVE-2020-11105",
            "spec_version": "2.1",
            "type": "vulnerability"
        }
    ],
    "type": "bundle"
}