{
    "type": "bundle",
    "id": "bundle--57461d52-6608-413f-bcb9-2622caa9e35d",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--1b3800c2-da35-4d8c-b8b4-ffb94f75367d",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-04-25T18:20:22.455062Z",
            "modified": "2024-04-25T18:20:22.455062Z",
            "name": "CVE-2024-32481",
            "description": "Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. Starting in version 0.3.8 and prior to version 0.4.0b1, when looping over a `range` of the form `range(start, start + N)`, if `start` is negative, the execution will always revert. This issue is caused by an incorrect assertion inserted by the code generation of the range `stmt.parse_For_range()`. The issue arises when `start` is signed, instead of using `sle`, `le` is used and `start` is interpreted as an unsigned integer for the comparison. If it is a negative number, its 255th bit is set to `1` and is hence interpreted as a very large unsigned integer making the assertion always fail. Any contract having a `range(start, start + N)` where `start` is a signed integer with the possibility for `start` to be negative is affected. If a call goes through the loop while supplying a negative `start` the execution will revert. Version 0.4.0b1 fixes the issue.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-32481"
                }
            ]
        }
    ]
}