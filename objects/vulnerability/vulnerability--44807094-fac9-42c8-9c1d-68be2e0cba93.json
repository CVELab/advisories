{
    "type": "bundle",
    "id": "bundle--fe265f9d-e355-4308-8d7b-06435320dd33",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--44807094-fac9-42c8-9c1d-68be2e0cba93",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2025-03-27T17:18:57.385721Z",
            "modified": "2025-03-27T17:18:57.385721Z",
            "name": "CVE-2022-49755",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nusb: gadget: f_fs: Prevent race during ffs_ep0_queue_wait\n\nWhile performing fast composition switch, there is a possibility that the\nprocess of ffs_ep0_write/ffs_ep0_read get into a race condition\ndue to ep0req being freed up from functionfs_unbind.\n\nConsider the scenario that the ffs_ep0_write calls the ffs_ep0_queue_wait\nby taking a lock &ffs->ev.waitq.lock. However, the functionfs_unbind isn't\nbounded so it can go ahead and mark the ep0req to NULL, and since there\nis no NULL check in ffs_ep0_queue_wait we will end up in use-after-free.\n\nFix this by making a serialized execution between the two functions using\na mutex_lock(ffs->mutex).",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2022-49755"
                }
            ]
        }
    ]
}