{
    "type": "bundle",
    "id": "bundle--201e0008-12f5-4fcf-b5b7-9549f4220f0b",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--03315304-9f75-4dc0-b02e-3b389023c5ab",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2025-01-11T16:22:06.821378Z",
            "modified": "2025-01-11T16:22:06.821378Z",
            "name": "CVE-2024-57881",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nmm/page_alloc: don't call pfn_to_page() on possibly non-existent PFN in split_large_buddy()\n\nIn split_large_buddy(), we might call pfn_to_page() on a PFN that might\nnot exist.  In corner cases, such as when freeing the highest pageblock in\nthe last memory section, this could result with CONFIG_SPARSEMEM &&\n!CONFIG_SPARSEMEM_EXTREME in __pfn_to_section() returning NULL and and\n__section_mem_map_addr() dereferencing that NULL pointer.\n\nLet's fix it, and avoid doing a pfn_to_page() call for the first\niteration, where we already have the page.\n\nSo far this was found by code inspection, but let's just CC stable as the\nfix is easy.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-57881"
                }
            ]
        }
    ]
}