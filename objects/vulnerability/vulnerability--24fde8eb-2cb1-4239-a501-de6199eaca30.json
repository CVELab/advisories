{
    "type": "bundle",
    "id": "bundle--d46cf709-640c-48b6-8393-d2cb3999b654",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--24fde8eb-2cb1-4239-a501-de6199eaca30",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-04-17T10:17:23.530694Z",
            "modified": "2024-04-17T10:17:23.530694Z",
            "name": "CVE-2024-26818",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ntools/rtla: Fix clang warning about mount_point var size\n\nclang is reporting this warning:\n\n$ make HOSTCC=clang CC=clang LLVM_IAS=1\n[...]\nclang -O -g -DVERSION=\\\"6.8.0-rc3\\\" -flto=auto -fexceptions\n\t-fstack-protector-strong -fasynchronous-unwind-tables\n\t-fstack-clash-protection  -Wall -Werror=format-security\n\t-Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS\n\t$(pkg-config --cflags libtracefs)    -c -o src/utils.o src/utils.c\n\nsrc/utils.c:548:66: warning: 'fscanf' may overflow; destination buffer in argument 3 has size 1024, but the corresponding specifier may require size 1025 [-Wfortify-source]\n  548 |         while (fscanf(fp, \"%*s %\" STR(MAX_PATH) \"s %99s %*s %*d %*d\\n\", mount_point, type) == 2) {\n      |                                                                         ^\n\nIncrease mount_point variable size to MAX_PATH+1 to avoid the overflow.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-26818"
                }
            ]
        }
    ]
}