{
    "id": "bundle--d651d713-cdbb-4866-b92e-0eb0db804efa",
    "objects": [
        {
            "created": "2021-03-13T20:11:16.703725Z",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "description": "An issue was discovered in adns before 1.5.2. adns_rr_info mishandles a bogus *datap. The general pattern for formatting integers is to sprintf into a fixed-size buffer. This is correct if the input is in the right range; if it isn't, the buffer may be overrun (depending on the sizes of the types on the current platform). Of course the inputs ought to be right. And there are pointers in there too, so perhaps one could say that the caller ought to check these things. It may be better to require the caller to make the pointer structure right, but to have the code here be defensive about (and tolerate with an error but without crashing) out-of-range integer values. So: it should defend each of these integer conversion sites with a check for the actual permitted range, and return adns_s_invaliddata if not. The lack of this check causes the SOA sign extension bug to be a serious security problem: the sign extended SOA value is out of range, and overruns the buffer when reconverted. This is related to sign extending SOA 32-bit integer fields, and use of a signed data type.",
            "external_references": [
                {
                    "external_id": "CVE-2017-9106",
                    "source_name": "cve"
                }
            ],
            "id": "vulnerability--24e9d97d-df0b-43c9-bc6c-2446a919cf56",
            "modified": "2021-12-01T16:19:51.601791Z",
            "name": "CVE-2017-9106",
            "spec_version": "2.1",
            "type": "vulnerability"
        }
    ],
    "type": "bundle"
}