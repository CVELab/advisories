{
    "type": "bundle",
    "id": "bundle--07dafc6f-f1be-4729-a4f6-9353af525923",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--5ca758e4-5fc9-448c-8e7d-ed2c387d6271",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-12-29T03:30:00.39572Z",
            "modified": "2024-12-29T03:30:00.39572Z",
            "name": "CVE-2024-56534",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nisofs: avoid memory leak in iocharset\n\nA memleak was found as below:\n\nunreferenced object 0xffff0000d10164d8 (size 8):\n  comm \"pool-udisksd\", pid 108217, jiffies 4295408555\n  hex dump (first 8 bytes):\n    75 74 66 38 00 cc cc cc                          utf8....\n  backtrace (crc de430d31):\n    [<ffff800081046e6c>] kmemleak_alloc+0xb8/0xc8\n    [<ffff8000803e6c3c>] __kmalloc_node_track_caller_noprof+0x380/0x474\n    [<ffff800080363b74>] kstrdup+0x70/0xfc\n    [<ffff80007bb3c6a4>] isofs_parse_param+0x228/0x2c0 [isofs]\n    [<ffff8000804d7f68>] vfs_parse_fs_param+0xf4/0x164\n    [<ffff8000804d8064>] vfs_parse_fs_string+0x8c/0xd4\n    [<ffff8000804d815c>] vfs_parse_monolithic_sep+0xb0/0xfc\n    [<ffff8000804d81d8>] generic_parse_monolithic+0x30/0x3c\n    [<ffff8000804d8bfc>] parse_monolithic_mount_data+0x40/0x4c\n    [<ffff8000804b6a64>] path_mount+0x6c4/0x9ec\n    [<ffff8000804b6e38>] do_mount+0xac/0xc4\n    [<ffff8000804b7494>] __arm64_sys_mount+0x16c/0x2b0\n    [<ffff80008002b8dc>] invoke_syscall+0x7c/0x104\n    [<ffff80008002ba44>] el0_svc_common.constprop.1+0xe0/0x104\n    [<ffff80008002ba94>] do_el0_svc+0x2c/0x38\n    [<ffff800081041108>] el0_svc+0x3c/0x1b8\n\nThe opt->iocharset is freed inside the isofs_fill_super function,\nBut there may be situations where it's not possible to\nenter this function.\n\nFor example, in the get_tree_bdev_flags function,when\nencountering the situation where \"Can't mount, would change RO state,\"\nIn such a case, isofs_fill_super will not have the opportunity\nto be called,which means that opt->iocharset will not have the chance\nto be freed,ultimately leading to a memory leak.\n\nLet's move the memory freeing of opt->iocharset into\nisofs_free_fc function.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-56534"
                }
            ]
        }
    ]
}