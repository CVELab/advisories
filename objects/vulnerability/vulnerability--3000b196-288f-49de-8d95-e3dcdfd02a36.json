{
    "type": "bundle",
    "id": "bundle--e3e78daf-e682-404c-b586-70ad2e1c4c4f",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--3000b196-288f-49de-8d95-e3dcdfd02a36",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-05-19T11:14:07.057275Z",
            "modified": "2024-05-19T11:14:07.057275Z",
            "name": "CVE-2024-35941",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet: skbuff: add overflow debug check to pull/push helpers\n\nsyzbot managed to trigger following splat:\nBUG: KASAN: use-after-free in __skb_flow_dissect+0x4a3b/0x5e50\nRead of size 1 at addr ffff888208a4000e by task a.out/2313\n[..]\n  __skb_flow_dissect+0x4a3b/0x5e50\n  __skb_get_hash+0xb4/0x400\n  ip_tunnel_xmit+0x77e/0x26f0\n  ipip_tunnel_xmit+0x298/0x410\n  ..\n\nAnalysis shows that the skb has a valid ->head, but bogus ->data\npointer.\n\nskb->data gets its bogus value via the neigh layer, which does:\n\n1556    __skb_pull(skb, skb_network_offset(skb));\n\n... and the skb was already dodgy at this point:\n\nskb_network_offset(skb) returns a negative value due to an\nearlier overflow of skb->network_header (u16).  __skb_pull thus\n\"adjusts\" skb->data by a huge offset, pointing outside skb->head\narea.\n\nAllow debug builds to splat when we try to pull/push more than\nINT_MAX bytes.\n\nAfter this, the syzkaller reproducer yields a more precise splat\nbefore the flow dissector attempts to read off skb->data memory:\n\nWARNING: CPU: 5 PID: 2313 at include/linux/skbuff.h:2653 neigh_connected_output+0x28e/0x400\n  ip_finish_output2+0xb25/0xed0\n  iptunnel_xmit+0x4ff/0x870\n  ipgre_xmit+0x78e/0xbb0",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-35941"
                }
            ]
        }
    ]
}