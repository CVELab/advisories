{
    "id": "bundle--c968d43c-9fb5-4f9f-a4f2-2f860330b786",
    "objects": [
        {
            "created": "2021-03-13T20:12:46.486396Z",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "description": "Opencast before 8.1 stores passwords using the rather outdated and cryptographically insecure MD5 hash algorithm. Furthermore, the hashes are salted using the username instead of a random salt, causing hashes for users with the same username and password to collide which is problematic especially for popular users like the default `admin` user. This essentially means that for an attacker, it might be feasible to reconstruct a user's password given access to these hashes. Note that attackers needing access to the hashes means that they must gain access to the database in which these are stored first to be able to start cracking the passwords. The problem is addressed in Opencast 8.1 which now uses the modern and much stronger bcrypt password hashing algorithm for storing passwords. Note, that old hashes remain MD5 until the password is updated. For a list of users whose password hashes are stored using MD5, take a look at the `/user-utils/users/md5.json` REST endpoint.",
            "external_references": [
                {
                    "external_id": "CVE-2020-5229",
                    "source_name": "cve"
                }
            ],
            "id": "vulnerability--ce97840a-75ab-4792-b83e-776fba707fd8",
            "modified": "2021-11-22T14:54:52.900149Z",
            "name": "CVE-2020-5229",
            "spec_version": "2.1",
            "type": "vulnerability"
        }
    ],
    "type": "bundle"
}