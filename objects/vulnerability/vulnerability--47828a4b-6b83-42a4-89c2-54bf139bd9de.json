{
    "type": "bundle",
    "id": "bundle--5bfdbf90-d242-476d-9326-a0435a7da96b",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--47828a4b-6b83-42a4-89c2-54bf139bd9de",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-03-04T19:12:30.236938Z",
            "modified": "2024-03-04T19:12:30.236938Z",
            "name": "CVE-2021-47107",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nNFSD: Fix READDIR buffer overflow\n\nIf a client sends a READDIR count argument that is too small (say,\nzero), then the buffer size calculation in the new init_dirlist\nhelper functions results in an underflow, allowing the XDR stream\nfunctions to write beyond the actual buffer.\n\nThis calculation has always been suspect. NFSD has never sanity-\nchecked the READDIR count argument, but the old entry encoders\nmanaged the problem correctly.\n\nWith the commits below, entry encoding changed, exposing the\nunderflow to the pointer arithmetic in xdr_reserve_space().\n\nModern NFS clients attempt to retrieve as much data as possible\nfor each READDIR request. Also, we have no unit tests that\nexercise the behavior of READDIR at the lower bound of @count\nvalues. Thus this case was missed during testing.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2021-47107"
                }
            ]
        }
    ]
}