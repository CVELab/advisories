{
    "type": "bundle",
    "id": "bundle--14e9b447-9db5-45bb-ac64-8e4f7f4a6ce3",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--7d9738e0-f22e-4c14-a02a-2146645ef968",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-10-21T13:28:20.968753Z",
            "modified": "2024-10-21T13:28:20.968753Z",
            "name": "CVE-2024-47748",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nvhost_vdpa: assign irq bypass producer token correctly\n\nWe used to call irq_bypass_unregister_producer() in\nvhost_vdpa_setup_vq_irq() which is problematic as we don't know if the\ntoken pointer is still valid or not.\n\nActually, we use the eventfd_ctx as the token so the life cycle of the\ntoken should be bound to the VHOST_SET_VRING_CALL instead of\nvhost_vdpa_setup_vq_irq() which could be called by set_status().\n\nFixing this by setting up irq bypass producer's token when handling\nVHOST_SET_VRING_CALL and un-registering the producer before calling\nvhost_vring_ioctl() to prevent a possible use after free as eventfd\ncould have been released in vhost_vring_ioctl(). And such registering\nand unregistering will only be done if DRIVER_OK is set.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-47748"
                }
            ]
        }
    ]
}