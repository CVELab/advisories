{
    "type": "bundle",
    "id": "bundle--869261c4-2d58-46da-bb45-86fc08bde45d",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--ff9b093e-7961-4099-aa09-6cc33d9f70d4",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-02-27T19:12:49.26823Z",
            "modified": "2024-02-27T19:12:49.26823Z",
            "name": "CVE-2021-46975",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnetfilter: conntrack: Make global sysctls readonly in non-init netns\n\nThese sysctls point to global variables:\n- NF_SYSCTL_CT_MAX (&nf_conntrack_max)\n- NF_SYSCTL_CT_EXPECT_MAX (&nf_ct_expect_max)\n- NF_SYSCTL_CT_BUCKETS (&nf_conntrack_htable_size_user)\n\nBecause their data pointers are not updated to point to per-netns\nstructures, they must be marked read-only in a non-init_net ns.\nOtherwise, changes in any net namespace are reflected in (leaked into)\nall other net namespaces. This problem has existed since the\nintroduction of net namespaces.\n\nThe current logic marks them read-only only if the net namespace is\nowned by an unprivileged user (other than init_user_ns).\n\nCommit d0febd81ae77 (\"netfilter: conntrack: re-visit sysctls in\nunprivileged namespaces\") \"exposes all sysctls even if the namespace is\nunpriviliged.\" Since we need to mark them readonly in any case, we can\nforego the unprivileged user check altogether.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2021-46975"
                }
            ]
        }
    ]
}